#include "constants.h"

module VMC
{
  uses 
  {
    interface Timer<TMilli> as Timer[uint8_t id];
    interface Leds;
    interface Boot;
    interface Read<uint16_t>;
    interface Packet as SerialPacket;
    interface AMPacket as SerialAMPacket;
    interface AMSend as SerialAMSend;
    interface Receive as SerialReceive;
    interface SplitControl as SerialAMControl;
  }
}
implementation
{

  /* Declarations */
  task void execute_instructionTask();
  void send_serial();
  void send_serial_msg( uint8_t instr, uint8_t appid, uint8_t pc );

  /* Serial variables */
  bool serial_busy = FALSE;
  message_t serial_p; 
  uint8_t serial_msgs = 0; 
  uint8_t serial_msgs_start = 0;
  uint8_t serial_msgs_queue[SerialQueueSize][SerialMsgSize];

  app apps[MAX_APPS];
  uint8_t active_app = MAX_APPS;
  uint32_t cache_time = 0;
  uint8_t cache_value = 100;


  /* Initialize VM */
  void system_init() {

    uint8_t i;
    for ( i = 0; i < MAX_APPS; i++ ) {

      apps[i].isActive = FALSE;
      apps[i].handler = NULL_HANDLER;
      apps[i].id = 0;

    }


  }

  /* Choose nexr application to run with Round Robin */
  void next_app() {

    uint8_t i;

    for ( i = 0; i < MAX_APPS; i++ ) {
      active_app = (active_app + 1 ) % MAX_APPS;
      if ( apps[active_app].isActive && apps[active_app].handler != NULL_HANDLER ) {
        post execute_instructionTask();
        return;
      }
    }

    /* This means that no active application is present */
    active_app = MAX_APPS;

  }

  /* Read data from the sensor */
  void read_sensor ( int8_t reg ) {

    uint32_t time_now = call Timer.getNow[0]();
    
   // if ( time_now - cache_time < CACHE_TIMEOUT && cache_time != 0  ) {

      apps[active_app].regs[reg] = 100;
      dbg("SENSOR", "Read from cache.\n");
      return;

   // }
    /* Store the waiting reg id */
   
    apps[active_app].waiting_sensor = reg;
    call Read.read();
  }

  /* Unload a binary from the VM */
  void unload_binary ( uint8_t appid ) {

    /* Find the application */
    uint8_t i,id;
    id = MAX_APPS;
    for ( i = 0; i < MAX_APPS; i++ ) {

      if ( apps[i].id == appid ) {
        id = i;
        break;
      }
    }

    /* No application found */
    if ( id == MAX_APPS ) {
      dbg("BIN","No application with id:%d is active.\n", appid);
      return;
    }

    apps[id].isActive = FALSE;
    apps[id].handler = NULL_HANDLER;
    apps[id].id = 0;

    switch ( id ) {

      case 0:
      call Leds.led0Off();
      break;

      case 1:
      call Leds.led1Off();
      break;

      case 2:
      call Leds.led2Off();
      break;

    }

    /* Deactivate all timers except 0 */
    if ( id != 0 )
      call Timer.stop[id]();

    /* If i am the active application find next, if any */
    if ( id == active_app ) {
      for ( i = 0; i < MAX_APPS ; i++ ) {
        active_app = (active_app + 1 ) % MAX_APPS;
        if ( apps[active_app].isActive && apps[active_app].handler != NULL_HANDLER )
          break;
       }
     }
    dbg("BIN","Application with id:%d unloaded.\n", appid );     
     /* If no other application is active, stop */
     if ( active_app == id )
      active_app = MAX_APPS;

  }

  /* Load a binary into the VM */
  void load_binary ( uint8_t *bin, uint8_t appid ) {

    uint8_t i, id;
    id = MAX_APPS;

    /* Find a slot for our app. If the app already exists, overwrite it */
    for ( i = 0; i < MAX_APPS; i++ ) {

      if ( apps[i].id == appid ) {
        id = i;
        break;
      }

      /* Store first empty slot */
      if ( !apps[i].isActive && id == MAX_APPS )
        id = i;
    }

    /* No space avail */
    if ( id == MAX_APPS ) {
      dbg("BIN","No space available.\n");
      return;
    }

    /* Copy init handler */
    for ( i = 0; i < bin[1]; i++ )
      apps[id].init[i] = bin[3 + i];

    /* Copy timer handler */
    for ( i = 0; i < bin[2]; i++ )
      apps[id].timer[i] = bin[3 + bin[1] + i];

    /* Initialize app */
    apps[id].handler = INIT_HANDLER;
    apps[id].isActive = TRUE;
    apps[id].id = appid;
    apps[id].waiting_sensor = MAX_REGS;

    /* Start application timer */
    if ( bin[2] > 0 ) {
      apps[id].next_handler = TIMER_HANDLER;
      call Timer.startPeriodic[id]( 1000 );
    }

    /* Initialize registers */
    for ( i = 0; i < MAX_REGS; i++ )
      apps[id].regs[i] = 0;

#ifdef DEBUG
    dbg("BIN", "Appid: %d id: %d \n", apps[id].id, id);
    for ( i = 0; i < 255; i++ ) {

      dbg("BIN", "Init: 0x%x \n", apps[id].init[i]);
      if ( apps[id].init[i] == 0 )
        break;
    }

    for ( i = 0; i < 255; i++ ) {

      dbg("BIN", "Timer: 0x%x \n", apps[id].timer[i]);
      if ( apps[id].timer[i] == 0 )
        break; 
    }
#endif

    next_app();
  }
  
  task void execute_instructionTask() {

    uint8_t *instr;
    int8_t r; // temp register
    app *p = &apps[active_app];

    /* In case the task is posted, but the binary unloaded */
    if ( active_app == MAX_APPS )
      return;


    if ( p->handler == INIT_HANDLER )
      instr = p->init + p->PC;
    else
      instr = p->timer + p->PC;

     if ( apps[active_app].waiting_sensor != MAX_REGS )
       next_app();
    /* Send command through serial */
    //send_serial_msg( instr[0] & 0xF0, apps[active_app].id , p->PC );

    switch ( instr[0] & 0xF0 ) {

      /* ret */
      case 0x00:

        dbg("TASK", "[APP:%d][PC:%d] ret \n\n",active_app, p->PC);
        p->handler = p->next_handler; // in case the timer was invoked
        p->next_handler = NULL_HANDLER;
        p->PC = 0;

      break;

      /* set */
      case 0x10:

        r = instr[0] & 0x0F;
        dbg("TASK", "[APP:%d][PC:%d] set: r%d = %d\n",active_app, p->PC, r, (int8_t) instr[1]);
        p->PC += 2;

        /* Error checking */
        if ( r <= 0 || r > MAX_REGS ) 
          break;

        p->regs[r-1] = (int8_t) instr[1];

      break;
      
      /* cpy */
      case 0x20:
  
        r = instr[0] & 0x0F;

        dbg("TASK", "[APP:%d][PC:%d] cpy: r%d = r%d\n",active_app, p->PC, r, instr[1]);
        p->PC += 2;  
        
        /* Error checking */
        if ( r <= 0 || r > MAX_REGS || instr[1] <= 0 || instr[1] > MAX_REGS ) 
          break;
  
        p->regs[r-1] = p->regs[instr[1]-1];

      break;
      
      /* add */
      case 0x30:
      
        r = instr[0] & 0x0F;
        
        dbg("TASK", "[APP:%d][PC:%d] add: r%d = r%d + r%d \n",active_app, p->PC, r, r, instr[1]); 
        p->PC += 2;         
        
        /* Error checking */
        if ( r <= 0 || r > MAX_REGS || instr[1] <= 0 || instr[1] > MAX_REGS ) 
          break;

        p->regs[r-1] += p->regs[instr[1] - 1];

      break;

      /* sub */
      case 0x40:
  
        r = instr[0] & 0x0F;

        dbg("TASK", "[APP:%d][PC:%d] sub: r%d = r%d - r%d \n",active_app, p->PC, r, r, instr[1]);
        p->PC += 2; 

        /* Error checking */
        if ( r <= 0 || r > MAX_REGS || instr[1] <= 0 || instr[1] > MAX_REGS ) 
          break;

        p->regs[r-1] -= p->regs[instr[1] - 1];

      break;

      /* inc */
      case 0x50:

        r = instr[0] & 0x0F;

        dbg("TASK", "[APP:%d][PC:%d] inc: r%d++ \n",active_app, p->PC, r );
        p->PC += 1; 

        /* Error checking */
        if ( r <= 0 || r > MAX_REGS ) 
          break;

        p->regs[r-1]++;

      break;

      /* dec */
      case 0x60:
  
        r = instr[0] & 0x0F;

        dbg("TASK", "[APP:%d][PC:%d] dec: r%d-- \n",active_app, p->PC, r );
        p->PC += 1;

        /* Error checking */
        if ( r <= 0 || r > MAX_REGS ) 
          break;

        p->regs[r-1]--;

      break;

      /* max */ 
      case 0x70:
  
        r = instr[0] & 0x0F;

        dbg("TASK", "[APP:%d][PC:%d] max: r%d = max(r%d,r%d) \n",active_app, p->PC, r, r, instr[1] );
        p->PC += 2;

        /* Error checking */
        if ( r <= 0 || r > MAX_REGS || instr[1] <= 0 || instr[1] > MAX_REGS ) 
          break;
        
        if ( p->regs[r-1] < p->regs[instr[1]-1] )
          p->regs[r-1] = p->regs[instr[1]-1];
  
      break;
     
      /* min */
      case 0x80:
      
        r = instr[0] & 0x0F;
        
        dbg("TASK", "[APP:%d][PC:%d] min: r%d = min(r%d,r%d) \n",active_app, p->PC, r, r, instr[1] );
        p->PC += 2;
        
        /* Error checking */
        if ( r <= 0 || r > MAX_REGS || instr[1] <= 0 || instr[1] > MAX_REGS ) 
          break;
        
        if ( p->regs[r-1] > p->regs[instr[1]-1] )
          p->regs[r-1] = p->regs[instr[1]-1];
        
      break;
      
      /* bgz */
      case 0x90:
  
        r = instr[0] & 0x0F;
        
        dbg("TASK", "[APP:%d][PC:%d] bgz: if ( r%d (= %d) > 0 ) pc = pc + %d \n",active_app, p->PC, r, p->regs[r-1], (int8_t) instr[1] );
        p->PC++;
        
        /* Error checking */
        if ( r <= 0 || r > MAX_REGS ) {
          p->PC++;
          break;
        }

        if ( p->regs[r-1] > 0 )
          p->PC += (int8_t) instr[1];
        else
          p->PC++;
          
      break;
      
      /* bez */
      case 0xA0:
  
        r = instr[0] & 0x0F;
        
        dbg("TASK", "[APP:%d][PC:%d] bez: if ( r%d (= %d) == 0 ) pc = pc + %d \n",active_app, p->PC, r,p->regs[r-1],  (int8_t) instr[1] );
        p->PC++;
        
        /* Error checking */
        if ( r <= 0 || r > MAX_REGS ) {
          p->PC++;
          break;
        }
        
        if ( p->regs[r-1] == 0 )
          p->PC += (int8_t) instr[1];
        else
          p->PC++;

      break;
      
      /* bra */
      case 0xB0:

        dbg("TASK", "[APP:%d][PC:%d] bra: pc = pc + %d \n",active_app, p->PC, (int8_t) instr[1] );
        p->PC += 1 + (int8_t) instr[1];

      break;  
  
      /* led */
      case 0xC0:

        r = instr[0] & 0x0F;

        dbg("TASK", "[APP:%d][PC:%d] led: %d  \n",active_app, p->PC, r );	
        /* Each app Opens a different led */
        switch ( active_app ) {

          case 0:

            if ( r )
              call Leds.led0On();
            else
              call Leds.led0Off();

          break;

          case 1:

            if ( r )
              call Leds.led1On();
            else
              call Leds.led1Off();

          break;

          case 2:

            if ( r )
              call Leds.led2On();
            else
              call Leds.led2Off();

          break;

        }

        p->PC += 1;

      break;

      /* rdb */
      case 0xD0:

        r = instr[0] & 0x0F; 

        p->PC += 1;

        /* Error checking */
        if ( r <= 0 || r > MAX_REGS )
          break;

        read_sensor( r );
        dbg("TASK", "[APP:%d][PC:%d] rdb: r%d = %d \n",active_app, p->PC, r, p->regs[r-1] );

      break;

      /* tmr */
      case 0xE0:

        dbg("TASK", "[APP:%d][PC:%d] tmr: Set timer to %d sec  \n",active_app, p->PC, instr[1] );

        if ( instr[1] == 0 )
          call Timer.stop[active_app]( );
        else
          call Timer.startPeriodic[active_app]( instr[1] * 1000 );

        p->PC += 2;

      break;

    }

    /* Choose next application */
    next_app();

  }


  event void Boot.booted()  {

    system_init();
    call SerialAMControl.start();
    /* Start a timer in order to know time */
    call Timer.startPeriodic[0]( 1000 );

  }

  event void Timer.fired[uint8_t id]()  {

      serial_response* returnmes = (serial_response *) (call SerialPacket.getPayload(&serial_p,sizeof(serial_response)));
      returnmes->instr = 1;
      returnmes->pc = 1;
      returnmes->appid = 1;
      if (call SerialAMSend.send(AM_BROADCAST_ADDR, &serial_p, sizeof(serial_response)) == SUCCESS)
        serial_busy = TRUE;

    if ( apps[id].isActive == 0 || apps[id].PC != 0 )
      return;
      
    dbg("TIMER", "[%s] Timer[%d] was fired.\n", sim_time_string() ,id );
    
    /* If the application is already executing, store next_handler
     * in order not to loose the invocation                        */
    if ( apps[id].handler == NULL_HANDLER )
      apps[id].handler = TIMER_HANDLER;
    else
      apps[id].next_handler = TIMER_HANDLER;

    /* If no other applications are running, need to  
     * post task in order to start executing me       */
    if ( active_app == MAX_APPS ) {
    
      active_app = id;
      post execute_instructionTask();
    
    } 

  }
  
  event void Read.readDone( error_t result, uint16_t val )  {
       
    uint8_t i;
       
    /* Update cache */
    if ( val > 255 )
      cache_value = 255;
    else 
      cache_value = (uint8_t) val;
    cache_time = call Timer.getNow[0]();

    /* Search for all the apps and store value */
    for ( i = 0; i < MAX_APPS; i++ ) {
      if ( apps[i].isActive && apps[i].waiting_sensor != MAX_REGS) {
        int8_t r = apps[i].waiting_sensor;

        if ( val > 255 )
          apps[i].regs[r] = 255;
        else
          apps[i].regs[r] = (uint8_t) val;
        apps[i].waiting_sensor = MAX_REGS;

        dbg("SENSOR", "Read from sensor:%d and stored it into r%d \n", val, r );
      }
     }
  }
  
  default command void Timer.startOneShot[uint8_t id](uint32_t milli){
    dbg("ERR", "Error in timer startOneShot.\n");
  }

  default command void Timer.startPeriodic[uint8_t id](uint32_t milli){
    dbg("ERR", "Error in timer startPeriodic.\n");
  }

  default command void Timer.stop[uint8_t id](){
    dbg("ERR", "Error in timer stop.\n");
  }
  
  default command uint32_t Timer.getNow[uint8_t id](){
    dbg("ERR", "Error in timer getNow.\n");
    return 0;
  }

  /* Serial */
  void send_serial_msg( uint8_t instr, uint8_t appid, uint8_t pc ) {
      if ( !serial_busy ) {
	serial_response* returnmes = (serial_response *) (call SerialPacket.getPayload(&serial_p,sizeof(serial_response)));
	returnmes->instr = instr;
	returnmes->pc = pc;
	returnmes->appid = appid;
	if (call SerialAMSend.send(AM_BROADCAST_ADDR, &serial_p, sizeof(serial_response)) == SUCCESS)
		serial_busy = TRUE;
      }
  }
  
  event void SerialAMControl.startDone( error_t err ) {
    if (err != SUCCESS)
      call SerialAMControl.start();

  }

  event void SerialAMControl.stopDone(error_t err) { }


  event void SerialAMSend.sendDone(message_t* msg, error_t err)  {

    if (&serial_p == msg)
      serial_busy = FALSE;

  }

  event message_t* SerialReceive.receive(message_t* msg, void* payload, uint8_t len) {

    test_serial_msg* serial_msg = (test_serial_msg *) payload;

       if ( serial_msg->type == INSTALL )
         load_binary( (uint8_t *)serial_msg->binary, serial_msg->appid );
       else if ( serial_msg->type == UNINSTALL )
         unload_binary ( serial_msg->appid );

    return msg;
    
  }
  
}
